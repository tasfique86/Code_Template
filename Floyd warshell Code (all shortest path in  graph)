#include <bits/stdc++.h>

#define MAX                 100005
#define ll                  long long int
#define vi                  vector<int>
#define vl                  vector<ll>
#define pb                  push_back
#define test                int txx;cin>>txx;while (txx--)
#define YES                 cout << "YES" << endl
#define NO                  cout << "NO" << endl
#define gcd(a,b)            __gcd(a,b)
#define lcm(a,b)            (a*b)/gcd(a,b)
#define fr(i,a,b)           for(ll i=a;i<=b;i++)
#define srt(a)              sort (a.begin(),a.end())
#define rsrt(v)             sort(v.rbegin(),v.rend())
#define Asrt(a,n)             sort (a,a+n);
#define Arsrt(a,n)            sort (a,a+n,greater<int>());
#define mp(x,y)             make_pair(x,y)
#define vp                  vector<pair<int, int > >
#define vpl                 vector<pair<ll, ll> >
#define upbd(v,x)           upper_bound(v.begin(),v.end(),r)
#define lwbd(v,x)           lower_bound(v.begin(),v.end(),r)
#define v_min(a)            *min_element (a.begin(),a.end())
#define v_max(a)            *max_element (a.begin(),a.end())
#define F                   first
#define S                   second
#define MOD                 1000000007
#define uint                unsigned int
#define sp                  cout<<fixed<<setprecision(10)<<num<<endl
#define Vsum(a)             accumulate(a.begin(),a.end(),0)
#define Asum(a,n)           accumulate(a,a+n,0)
#define cov(v)              for(auto it:v)cout<<it<<' '; cout<<endl;
#define civ(v)              for(auto &it:v) cin>>it;
#define Nl                  cout<<"\n";


#define TR ios::sync_with_stdio(false);cin.tie(0);

using namespace std;


///--------------Graph Moves--------------------------------------
///const int fx[] = {+1,-1,+0,+0};
///const int fy[] = {+0,+0,+1,-1};
///const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's move
///const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; ///king's Move
///const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2}; ///knight's move
///const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1}; ///knight's move
///---------------------------------------------------------------

//+++++++++++++++++  GRAPH   ++++++++


/////---->>> floyd warshell Algorithm

const int Na=510;

const int INF=1e9;

int dis[Na][Na];

int main()
{
    TR


    for(int i=0;i<Na;i++)
    {
        for(int j=0;j<Na;j++){
            if(i==j) 
                dis[i][j]=0;
            else
                dis[i][j]=INF;
        }
    }

     ll n,a,m,b,sm=0;
     cin>>n>>m;

     for(int i=0;i<m;i++)
     {
       int x,y,wt;
       cin>>x>>y>>wt;

       dis[x][y]=wt;
     }
     YES;

     for(int k=1;k<=n;k++){

        for(int i=1;i<=n;i++){

                  for(int j=1;j<=n;j++){

                    if(dis[i][k]!=INF && dis[k][j]!=INF)  // condition for negetive value 
                      dis[i][j]=min(dis[i][j],(dis[i][k]+dis[k][j]));
                 }
        
        }
     }
     NO;

     ///---->optinal 

      for(int i=1;i<=n;i++){

                  for(int j=1;j<=n;j++){
                     if(dis[i][j]==INF)
                        cout<<"I ";
                    else
                        cout<<dis[i][j]<<" ";
                 }
                 Nl;
        
        }


    // test
    // {

       
        
    // }


}

// 6
// 9
// 1
// 1 2 1
// 1 3 5
// 2 4 2
// 2 3 2
// 2 5 2
// 3 5 2
// 4 5 1
// 4 6 2
// 5 6 2

