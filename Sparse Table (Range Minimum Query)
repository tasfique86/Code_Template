#include <bits/stdc++.h>
#define MAX                 100005
#define ll                  long long int
#define vi                  vector<int>
#define vl                  vector<ll>
#define pb                  push_back
#define test                int txx;cin>>txx;while (txx--)
#define YES                 cout << "YES" << endl
#define NO                  cout << "NO" << endl
#define gcd(a,b)            __gcd(a,b)
#define lcm(a,b)            (a*b)/gcd(a,b)
#define fr(i,a,b)           for(ll i=a;i<=b;i++)
#define srt(a)              sort (a.begin(),a.end())
#define rsrt(v)             sort(v.rbegin(),v.rend())
#define Asrt(a,n)             sort (a,a+n);
#define Arsrt(a,n)            sort (a,a+n,greater<int>());
#define mkp(x,y)             make_pair(x,y)
#define vp                  vector<pair<int, int > >
#define vpl                 vector<pair<ll, ll> >
#define upbd(v,x)           upper_bound(v.begin(),v.end(),r)
#define lwbd(v,x)           lower_bound(v.begin(),v.end(),r)
#define v_min(a)            *min_element (a.begin(),a.end())
#define v_max(a)            *max_element (a.begin(),a.end())
#define F                   first
#define S                   second
#define MOD                 1000000007
#define uint                unsigned int
#define setp(num)           cout<<fixed<<setprecision(6)<<num<<endl
#define Vsum(a)             accumulate(a.begin(),a.end(),0)
#define Asum(a,n)           accumulate(a,a+n,0)
#define coutv(v)            for(auto it:v){cout<<it<<' ';}cout<<endl;
#define cinv(v)             for(auto &it:v)cin>>it;
#define p_queue              priority_queue<ll>

#define Nl                  cout<<"\n";


#define TR ios::sync_with_stdio(false);cin.tie(0);

using namespace std;



const int Na=510;

const int INF=1e9;

int st[25][100001];

int lg[100002];


void calculateLog (){
    lg[1] = 0;
for (int i = 2; i <= 100000; i++)
    lg[i] = lg[i/2] + 1;
}

void sparseTable(int arr[],int N,int K){
  
   copy(arr, arr + N, st[0]);

    for (int i = 1; i <= K; i++){
            for (int j = 0; j + (1 << i) <= N; j++){
                        st[i][j] = min(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
            }

    }
    
}
int query(int L,int R){
    int i = lg[R - L + 1];
    int minimum = min(st[i][L], st[i][R - (1 << i) + 1]);
    return minimum;
}

//https://www.spoj.com/problems/RMQSQ/

int main( )
{
    TR


   // test
   // {
        calculateLog();
        int n,q,k;
        cin>>n;
        int arr[n];
        for(int i=0;i<n;i++){
            cin>>arr[i];
        }
        k=lg[n];
        
        sparseTable(arr,n,k);
        cin>>q;
        for(int i=0;i<q;i++){
            int l,r;
            cin>>l>>r;
            cout<<query(l,r)<<endl;
        }
        


  //  }

}
