#include <bits/stdc++.h>

#define MAX                 100005
#define ll                  long long int
#define vi                  vector<int>
#define vl                  vector<ll>
#define pb                  push_back
#define test                int txx;cin>>txx;while (txx--)
#define YES                 cout << "YES" << endl
#define NO                  cout << "NO" << endl
#define gcd(a,b)            __gcd(a,b)
#define lcm(a,b)            (a*b)/gcd(a,b)
#define fr(i,a,b)           for(ll i=a;i<=b;i++)
#define srt(a)              sort (a.begin(),a.end())
#define rsrt(v)             sort(v.rbegin(),v.rend())
#define Asrt(a,n)             sort (a,a+n);
#define Arsrt(a,n)            sort (a,a+n,greater<int>());
#define mp(x,y)             make_pair(x,y)
#define vp                  vector<pair<int, int > >
#define vpl                 vector<pair<ll, ll> >
#define upbd(v,x)           upper_bound(v.begin(),v.end(),r)
#define lwbd(v,x)           lower_bound(v.begin(),v.end(),r)
#define v_min(a)            *min_element (a.begin(),a.end())
#define v_max(a)            *max_element (a.begin(),a.end())
#define F                   first
#define S                   second
#define MOD                 1000000007
#define uint                unsigned int
#define sp                  cout<<fixed<<setprecision(10)<<num<<endl
#define Vsum(a)             accumulate(a.begin(),a.end(),0)
#define Asum(a,n)           accumulate(a,a+n,0)
#define cov(v)              for(auto it:v)cout<<it<<' '; cout<<endl;
#define civ(v)              for(auto &it:v) cin>>it;
#define Nl                  cout<<"\n";


#define TR ios::sync_with_stdio(false);cin.tie(0);

using namespace std;


//+++++++++++++++++  GRAPH   ++++++++



const int Na=1e5+10;




//vector<pair<int,int>> graph3[Na]; //whith weight 


const int INFI=1e9+10;


vector<pair<int,int>> g[Na];




vector<pair<int,int>> movementss={
    {0,1},{0,-1},{1,0},{-1,0},
    {1,1},{1,-1},{-1,1},{-1,-1}
};




int diskstra(int source,int& n){

     vector<int> vis(Na,0);
     vector<int> dist(Na,INFI);

     set<pair<int,int> >st; /// {weight Or cost,node}

     st.insert({0,source});
     dist[source]=0;

    while(st.size()>0)
    {
        auto node= *st.begin();
        int v=node.S;
        int v_dis=node.F;
        st.erase(st.begin());
        if(vis[v]) continue;
        vis[v] = 1;
        for(auto child: g[v]){
            
          //  cout<<v<<"  par > wt "<<v_dis<<endl;
            int child_v=child.S;
            int wt=child.F;
          // cout<<child_v<<"  child > wt "<<wt<<" sm> "<<wt+v_dis<<endl;
            if(v_dis+wt < dist[child_v]){
                dist[child_v]=v_dis + wt ;
                st.insert({dist[child_v],child_v});
            }
        }
    }
    
    return dist[n];

}


int main()
{
    TR
    //SievePrime();
    

   
    

        
      int n,m,k;
      cin>>n>>m>>k; //---> n=node ,m= edge, k=source or start point
     // reset();
       // YES;
      for(int i=0;i<m;i++)
      {
       int x,y,wt;
       cin>>x>>y>>wt;
       g[x].pb({wt,y});
      }
    
     ll dis=diskstra(k,n); // --> start point & end point
     
     cout<<dis<<endl;
   
   

}


