#include <bits/stdc++.h>

#define MAX                 100005
#define ll                  long long int
#define vi                  vector<int>
#define vl                  vector<ll>
#define pb                  push_back
#define test                int txx;cin>>txx;while (txx--)
#define YES                 cout << "YES" << endl
#define NO                  cout << "NO" << endl
#define gcd(a,b)            __gcd(a,b)
#define lcm(a,b)            (a*b)/gcd(a,b)
#define fr(i,a,b)           for(ll i=a;i<=b;i++)
#define srt(a)              sort (a.begin(),a.end())
#define rsrt(v)             sort(v.rbegin(),v.rend())
#define Asrt(a,n)             sort (a,a+n);
#define Arsrt(a,n)            sort (a,a+n,greater<int>());
#define mp(x,y)             make_pair(x,y)
#define vp                  vector<pair<int, int > >
#define vpl                 vector<pair<ll, ll> >
#define upbd(v,x)           upper_bound(v.begin(),v.end(),r)
#define lwbd(v,x)           lower_bound(v.begin(),v.end(),r)
#define v_min(a)            *min_element (a.begin(),a.end())
#define v_max(a)            *max_element (a.begin(),a.end())
#define F                   first
#define S                   second
#define MOD                 1000000007
#define uint                unsigned int
#define sp                  cout<<fixed<<setprecision(10)<<num<<endl
#define Vsum(a)             accumulate(a.begin(),a.end(),0)
#define Asum(a,n)           accumulate(a,a+n,0)
#define cov(v)              for(auto it:v)cout<<it<<' '; cout<<endl;
#define civ(v)              for(auto &it:v) cin>>it;
#define Nl                  cout<<"\n";


#define TR ios::sync_with_stdio(false);cin.tie(0);

using namespace std;


///--------------Graph Moves--------------------------------------
///const int fx[] = {+1,-1,+0,+0};
///const int fy[] = {+0,+0,+1,-1};
///const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's move
///const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; ///king's Move
///const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2}; ///knight's move
///const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1}; ///knight's move
///---------------------------------------------------------------



//+++++++++++++++++  GRAPH   ++++++++



const int Na=1e5+10;


vector<int> gp[Na];

//vector<pair<int,int>> graph3[Na]; //whith weight 



int main()
{
    TR
    //SievePrime();
    

   
   ll con=1;
 //   test
 //   {
      ll n,d,sm=0;
    //  reset();
     

      cin>>n>>d;
      vl v,vv;
      unordered_map<ll,ll> mp,poC;
      for(int i=0;i<n;i++)
      {
        ll x;
        cin>>x;
        v.pb(x);
        mp[i]=x;
        
      }
      int ans=1;
      vv =v;
      srt(vv);
      vector<int> vec[n-d];
      for(int i=0;i<d;i++)
      {
        int in=i;
        while(in<n)
        {
            vec[i].pb(v[in]);
            in+=d;
        }
        srt(vec[i]);
      }
      ll szz=vec[0].size();
      vl tv;
      for(int i=0;i<szz;i++)
      {
        for(int j=0;j<d;j++)
        {
            if(vec[j].size()>j)
            {
                tv.pb(vec[j][i]);
            }
        }

      }
      if(is_sorted(tv.begin(),tv.end())) YES;
      else NO;
     
      
 //   }
   

}

