#include <bits/stdc++.h>

#define MAX                 100005
#define ll                  long long int
#define vi                  vector<int>
#define vl                  vector<ll>
#define pb                  push_back
#define test                int txx;cin>>txx;while (txx--)
#define YES                 cout << "YES" << endl
#define NO                  cout << "NO" << endl
#define gcd(a,b)            __gcd(a,b)
#define lcm(a,b)            (a*b)/gcd(a,b)
#define fr(i,a,b)           for(ll i=a;i<=b;i++)
#define srt(a)              sort (a.begin(),a.end())
#define rsrt(v)             sort(v.rbegin(),v.rend())
#define Asrt(a,n)             sort (a,a+n);
#define Arsrt(a,n)            sort (a,a+n,greater<int>());
#define mp(x,y)             make_pair(x,y)
#define vp                  vector<pair<int, int > >
#define vpl                 vector<pair<ll, ll> >
#define upbd(v,x)           upper_bound(v.begin(),v.end(),r)
#define lwbd(v,x)           lower_bound(v.begin(),v.end(),r)
#define v_min(a)            *min_element (a.begin(),a.end())
#define v_max(a)            *max_element (a.begin(),a.end())
#define F                   first
#define S                   second
#define MOD                 1000000007
#define uint                unsigned int
#define sp                  cout<<fixed<<setprecision(10)<<num<<endl
#define Vsum(a)             accumulate(a.begin(),a.end(),0)
#define Asum(a,n)           accumulate(a,a+n,0)
#define cov(v)              for(auto it:v)cout<<it<<' '; cout<<endl;
#define civ(v)              for(auto &it:v) cin>>it;
#define Nl                  cout<<"\n";


#define TR ios::sync_with_stdio(false);cin.tie(0);

using namespace std;



//+++++++++++++++++  GRAPH   ++++++++



const int Na=1e3+10;

int n,m;


//vector<pair<int,int>> graph3[Na]; //whith weight 


const int INFI=1e9+10;


vector<pair<int,int>> g[Na];

// vector<int> lev(Na,INFI);
int val[Na][Na];
int vis[Na][Na];
int lev[Na][Na];

vector<pair<int,int>> movementss={
    {0,1},{0,-1},{1,0},{-1,0},
    {1,1},{1,-1},{-1,1},{-1,-1}
};

bool isValid(int i,int j){
    return i>=0 && j>=0 && i<n && j<m;
}



int bfs( ){
    int mx=0;
     
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            mx=max(mx,val[i][j]);
        }
    }
   // cout<<mx<<endl;
    //cout<<n<<" "<<m<<endl;
    queue<pair<int,int>> q;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(val[i][j]==mx)
               {
                //cout<<i<<" "<<j<<endl;
                q.push({i,j});
                vis[i][j]=1;
                lev[i][j]=0;
               }
        }
    }
    int ans=0;
    while(!q.empty()){

        auto v=q.front();
        int v_x=v.first;
        int v_y=v.second;
        q.pop();
        for(auto it : movementss)
        {
            int child_x=v_x+it.first;
            int child_y=v_y+it.second;
            
            if(!isValid(child_x,child_y)) continue;
            if(vis[child_x][child_y]) continue;


            q.push({child_x,child_y});
            lev[child_x][child_y]=lev[v_x][v_y]+1;
            vis[child_x][child_y]=1;
            ans=max(ans,lev[child_x][child_y]);
        }
    }
    return ans;
  
}


void reset(){
   
    for(int i=0;i<n;i++)
    {
        for (int j = 0; j < m; ++j)
        {
            vis[i][j]=0;
            lev[i][j]=INFI;
        }
    }
}

int main()
{
    TR
    //SievePrime();
    

   
    
    test
    {
        
      
      cin>>n>>m;
      reset();
         
      for(int i=0;i<n;i++)
      {
       for(int j=0;j<m;j++)
       {
    
         cin>>val[i][j];

       }

      }
     cout<<bfs()<<endl;
    }
   

}

